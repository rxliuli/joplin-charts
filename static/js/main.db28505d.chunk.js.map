{"version":3,"sources":["pages/setting/JoplinSetting.tsx","pages/setting/index.ts","pages/setting/JoplinSetting.module.css","pages/home/Home.module.css","serviceWorker.ts","pages/tag/api/TagCloudApi.ts","pages/tag/TagCloud.tsx","pages/relation/util/NoteRelationConvertUtil.ts","pages/relation/RelationMap.tsx","pages/home/Home.tsx","pages/demo/CreateNoteDemo.tsx","pages/sunburst/util/getNotebookSunburstData.ts","pages/sunburst/NotebookSunburst.tsx","pages/timeline/NoteTimeline.tsx","component/router/routeList.ts","common/util/proxyStorage.ts","App.tsx","index.tsx","common/hooks/useMessage.ts"],"names":[],"mappings":"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","file":"static/js/main.db28505d.chunk.js","sourcesContent":["import {\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n} from '@material-ui/core'\r\nimport * as React from 'react'\r\nimport css from './JoplinSetting.module.css'\r\nimport { useForm } from 'react-hook-form'\r\nimport { config, noteApi } from 'joplin-api'\r\nimport { useAsync, useLocalStorage } from 'react-use'\r\nimport { useHistory } from 'react-router'\r\nimport { SettingForm } from './model/SettingForm'\r\nimport i18next, { InitOptions } from 'i18next'\r\nimport { useMessage } from '../../common/hooks/useMessage'\r\n\r\ntype PropsType = {}\r\n\r\ntype LocaleKeys =\r\n  | 'successMsg'\r\n  | 'errorMsg'\r\n  | 'settingFormHeader'\r\n  | 'tokenLabel'\r\n  | 'tokenErrorRequiredMsg'\r\n  | 'portLabel'\r\n  | 'portErrorRequiredMsg'\r\n  | 'submitText'\r\n\r\nconst i18nOptions: InitOptions = {\r\n  lng: navigator.language,\r\n  fallbackLng: 'en',\r\n  resources: {\r\n    en: {\r\n      translation: {\r\n        successMsg:\r\n          'The verification is successful, and you are about to enter the homepage',\r\n        errorMsg:\r\n          'Verification failed, please check whether the authorization token and port number are correct',\r\n        settingFormHeader: 'Settings page',\r\n        tokenLabel: 'Token',\r\n        tokenErrorRequiredMsg: 'Token is required',\r\n        portLabel: 'Port',\r\n        portErrorRequiredMsg: 'Port is required',\r\n        submitText: 'Submit',\r\n      } as Record<LocaleKeys, string>,\r\n    },\r\n    'zh-CN': {\r\n      translation: {\r\n        successMsg: '验证成功，即将进入主页',\r\n        errorMsg: '验证失败，请检查授权 token 令牌与端口号是否正确',\r\n        settingFormHeader: '设置页',\r\n        tokenLabel: '授权 Token 令牌',\r\n        tokenErrorRequiredMsg: 'token 是必填项',\r\n        portLabel: '端口',\r\n        portErrorRequiredMsg: '端口是必填项',\r\n        submitText: '提交',\r\n      } as Record<LocaleKeys, string>,\r\n    },\r\n  },\r\n}\r\n\r\n/**\r\n * joplin 配置页面\r\n */\r\nconst JoplinSetting: React.FC<PropsType> = () => {\r\n  const i18nLoad = useAsync(() => i18next.init(i18nOptions), [])\r\n  const { register, handleSubmit, errors } = useForm<SettingForm>({\r\n    defaultValues: {\r\n      port: 41184,\r\n    },\r\n  })\r\n\r\n  const [, setSettingForm] = useLocalStorage<SettingForm>('settingForm')\r\n  const history = useHistory()\r\n\r\n  const { success, error } = useMessage()\r\n\r\n  async function onSubmit(data: SettingForm) {\r\n    console.log('handleSubmit: ', data)\r\n    try {\r\n      config.token = data.token\r\n      config.port = data.port\r\n      await noteApi.list({\r\n        fields: [],\r\n        limit: 1,\r\n      })\r\n      setSettingForm(config)\r\n      success(i18next.t<string, LocaleKeys>('successMsg'))\r\n      history.push('/')\r\n    } catch (e) {\r\n      error(i18next.t<string, LocaleKeys>('errorMsg'))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {i18nLoad.value && (\r\n        <Grid\r\n          container\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          className={css.container}\r\n        >\r\n          {\r\n            <Container maxWidth=\"xs\">\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                {i18next.t<string, LocaleKeys>('settingFormHeader')}\r\n              </Typography>\r\n              <form onSubmit={handleSubmit(onSubmit)}>\r\n                <TextField\r\n                  fullWidth\r\n                  name=\"token\"\r\n                  label={i18next.t<string, LocaleKeys>('tokenLabel')}\r\n                  autoFocus\r\n                  error={!!errors.token}\r\n                  inputRef={register({\r\n                    required: i18next.t<string, LocaleKeys>(\r\n                      'tokenErrorRequiredMsg',\r\n                    ),\r\n                  })}\r\n                  helperText={!!errors.token ? errors.token.message : ' '}\r\n                />\r\n                <TextField\r\n                  fullWidth\r\n                  name=\"port\"\r\n                  label={i18next.t<string, LocaleKeys>('portLabel')}\r\n                  error={!!errors.port}\r\n                  inputRef={register({\r\n                    required: i18next.t<string, LocaleKeys>(\r\n                      'portErrorRequiredMsg',\r\n                    ),\r\n                  })}\r\n                  helperText={!!errors.port ? errors.port.message : ' '}\r\n                />\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                >\r\n                  {i18next.t<string, LocaleKeys>('submitText')}\r\n                </Button>\r\n              </form>\r\n            </Container>\r\n          }\r\n        </Grid>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default JoplinSetting\r\n","export { default } from './JoplinSetting'\r\nexport * from './model/SettingForm'\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"JoplinSetting_container__3qmxA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Home_root__y74vd\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { PageUtil, tagApi } from 'joplin-api'\r\n\r\nexport interface TagModel {\r\n  id: string\r\n  tag: string\r\n  count: number\r\n}\r\n\r\nexport class TagCloudApi {\r\n  async countList() {\r\n    const tagList = await PageUtil.pageToAllList(tagApi.list)\r\n    return (await Promise.all(\r\n      tagList.map(async (tag) => ({\r\n        id: tag.id,\r\n        tag: tag.title,\r\n        count: (\r\n          await PageUtil.pageToAllList(tagApi.notesByTagId as any, {\r\n            id: tag.id,\r\n          })\r\n        ).length,\r\n      })),\r\n    )) as TagModel[]\r\n  }\r\n}\r\n\r\nexport const tagCloudApi = new TagCloudApi()\r\n","import * as React from 'react'\r\nimport { tagCloudApi } from './api/TagCloudApi'\r\nimport { useMount } from 'react-use'\r\nimport { WordCloud } from '@antv/g2plot'\r\nimport i18next, { InitOptions } from 'i18next'\r\nimport { useMessage } from '../../common/hooks/useMessage'\r\n\r\ntype PropsType = {}\r\n\r\ntype LocaleKeys = 'successMsg' | 'errorMsg'\r\n\r\nconst i18nOptions: InitOptions = {\r\n  lng: navigator.language,\r\n  fallbackLng: 'en',\r\n  resources: {\r\n    en: {\r\n      translation: {\r\n        successMsg: 'Successfully loaded the joplin tag list',\r\n        errorMsg: 'Failed to load joplin tag list',\r\n      } as Record<LocaleKeys, string>,\r\n    },\r\n    'zh-CN': {\r\n      translation: {\r\n        successMsg: 'Joplin 标签列表加载成功',\r\n        errorMsg: 'Joplin 标签列表加载失败',\r\n      } as Record<LocaleKeys, string>,\r\n    },\r\n  },\r\n}\r\n\r\n/**\r\n * 标签云\r\n */\r\nconst TagCloud: React.FC<PropsType> = () => {\r\n  const { success, error } = useMessage()\r\n  useMount(async () => {\r\n    await i18next.init(i18nOptions)\r\n    try {\r\n      const tagCountList = await tagCloudApi.countList()\r\n      const wordCloud = new WordCloud('container', {\r\n        data: tagCountList,\r\n        wordField: 'tag',\r\n        weightField: 'count',\r\n        colorField: 'tag',\r\n        random: () => 0.5,\r\n      })\r\n      wordCloud.render()\r\n      success(i18next.t<string, LocaleKeys>('successMsg'))\r\n    } catch (e) {\r\n      console.error(e)\r\n      error(i18next.t<string, LocaleKeys>('errorMsg'))\r\n    }\r\n  })\r\n\r\n  return <div id=\"container\" style={{ width: '100%', height: '100vh' }} />\r\n}\r\n\r\nexport default TagCloud\r\n","import MarkdownIt from 'markdown-it'\r\nimport { NoteGetRes } from 'joplin-api/dist/modal/NoteGetRes'\r\nimport { NoteProperties } from 'joplin-api/dist/modal/NoteProperties'\r\n\r\nexport type Note = Pick<NoteGetRes, 'id' | 'title'> & {\r\n  links: Pick<NoteGetRes, 'id' | 'title'>[]\r\n}\r\n\r\ntype RelationNote = Pick<NoteProperties, 'id' | 'title' | 'body'>\r\n\r\nexport class NoteRelationConvertUtil {\r\n  static convert(noteList: RelationNote[]): Note[] {\r\n    const md = new MarkdownIt()\r\n    const noteIdMap = noteList.reduce((res, note) => {\r\n      res.set(note.id, note)\r\n      return res\r\n    }, new Map<string, RelationNote>())\r\n\r\n    function findRelationByNote(note: RelationNote) {\r\n      const tokenList = md.parseInline(note.body, '')\r\n      return tokenList[0]\r\n        .children!.filter((token) => {\r\n          return (\r\n            token.type === 'link_open' &&\r\n            token.attrGet('href')?.startsWith(':/')\r\n          )\r\n        })\r\n        .map((token) => {\r\n          return token.attrGet('href')?.substr(2)!\r\n        })\r\n        .filter((id) => {\r\n          return noteIdMap.has(id)\r\n        })\r\n        .map((id) => ({\r\n          id,\r\n          title: noteIdMap.get(id)!.title,\r\n        }))\r\n    }\r\n\r\n    return noteList.map(\r\n      (note) =>\r\n        ({\r\n          id: note.id,\r\n          title: note.title,\r\n          links: findRelationByNote(note),\r\n        } as Note),\r\n    )\r\n  }\r\n}\r\n","import * as React from 'react'\r\nimport { useMount } from 'react-use'\r\nimport { noteApi, PageUtil } from 'joplin-api'\r\nimport { NoteRelationConvertUtil } from './util/NoteRelationConvertUtil'\r\nimport Graphin, { Data, Edge, Node } from '@antv/graphin'\r\nimport '@antv/graphin/dist/index.css'\r\nimport { useState } from 'react'\r\nimport { useHistory } from 'react-router'\r\nimport i18next, { InitOptions } from 'i18next'\r\nimport { useMessage } from '../../common/hooks/useMessage'\r\n\r\ntype PropsType = {}\r\n\r\ntype LocaleKeys = 'successMsg' | 'errorMsg'\r\n\r\nconst i18nOptions: InitOptions = {\r\n  lng: navigator.language,\r\n  fallbackLng: 'en',\r\n  resources: {\r\n    en: {\r\n      translation: {\r\n        successMsg: 'Succeeded in loading note diagram',\r\n        errorMsg: 'Failed to load note diagram',\r\n      } as Record<LocaleKeys, string>,\r\n    },\r\n    'zh-CN': {\r\n      translation: {\r\n        successMsg: '加载笔记关系图成功',\r\n        errorMsg: '加载笔记关系图失败',\r\n      } as Record<LocaleKeys, string>,\r\n    },\r\n  },\r\n}\r\n\r\nasync function getData() {\r\n  const noteList = await PageUtil.pageToAllList(noteApi.list, {\r\n    fields: ['id', 'title', 'body'],\r\n  })\r\n  const noteLinks = NoteRelationConvertUtil.convert(noteList)\r\n  const data: Data = {\r\n    nodes: noteLinks.map((note) => {\r\n      const data = {\r\n        id: note.id,\r\n        label: note.title.startsWith('#')\r\n          ? note.title.replace('# ', '')\r\n          : note.title,\r\n      }\r\n      return {\r\n        data,\r\n        ...data,\r\n        shape: 'CircleNode',\r\n        style: {\r\n          nodeSize: 24 * Math.min(1 + note.links.length, 5),\r\n        },\r\n      } as Node\r\n    }),\r\n    edges: noteLinks.flatMap((note) =>\r\n      note.links.map((link) => {\r\n        const data = {\r\n          source: note.id,\r\n          target: link.id,\r\n        }\r\n        return {\r\n          data,\r\n          ...data,\r\n        } as Edge\r\n      }),\r\n    ),\r\n  }\r\n  return data\r\n}\r\n\r\n/**\r\n * 笔记关系图\r\n */\r\nconst RelationMap: React.FC<PropsType> = () => {\r\n  const [graphData, setGraphData] = useState<Data>({ edges: [], nodes: [] })\r\n\r\n  const { success, error } = useMessage()\r\n  const history = useHistory()\r\n  useMount(async () => {\r\n    await i18next.init(i18nOptions)\r\n    try {\r\n      const data = await getData()\r\n      setGraphData(data)\r\n      success(i18next.t<string, LocaleKeys>('successMsg'))\r\n    } catch (e) {\r\n      error(i18next.t<string, LocaleKeys>('errorMsg'))\r\n      history.push('/setting')\r\n    }\r\n  })\r\n  return (\r\n    <div style={{ height: '100vh' }}>\r\n      <Graphin\r\n        data={graphData}\r\n        layout={{\r\n          name: 'force',\r\n          options: {\r\n            preset: { name: 'concentric' },\r\n            preventOverlap: true,\r\n            centripetalOptions: {\r\n              single: 100, // 给孤立节点设置原来 （100/2）倍的向心力\r\n              center: () => {\r\n                // 根据不同的节点与度数设置不同的向心力的中心点\r\n                return {\r\n                  x: 100,\r\n                  y: 100,\r\n                }\r\n              },\r\n            },\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RelationMap\r\n","import * as React from 'react'\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Container,\r\n  List,\r\n  ListItem,\r\n} from '@material-ui/core'\r\nimport i18next, { InitOptions } from 'i18next'\r\nimport css from './Home.module.css'\r\nimport { useAsync } from 'react-use'\r\nimport { Link } from 'react-router-dom'\r\n\r\ntype PropsType = {}\r\n\r\ntype LocaleKeys =\r\n  | 'settingRouteName'\r\n  | 'relationRouteName'\r\n  | 'tagRouteName'\r\n  | 'sunburstRouteName'\r\n  | 'timelineName'\r\n  | 'chartList'\r\n\r\nconst i18nOptions: InitOptions = {\r\n  lng: navigator.language,\r\n  fallbackLng: 'en',\r\n  resources: {\r\n    en: {\r\n      translation: {\r\n        settingRouteName: 'Set up Joplin Token/Port',\r\n        relationRouteName: 'Relation chart',\r\n        tagRouteName: 'Tag Cloud',\r\n        sunburstRouteName: 'Note directory size analysis chart',\r\n        timelineName: 'timeline',\r\n        chartList: 'Chart list',\r\n      } as Record<LocaleKeys, string>,\r\n    },\r\n    'zh-CN': {\r\n      translation: {\r\n        settingRouteName: '设置 Joplin Token/Port',\r\n        relationRouteName: '关系图',\r\n        tagRouteName: '标签云',\r\n        sunburstRouteName: '笔记目录大小分析图',\r\n        timelineName: '时间线',\r\n        chartList: '图表列表',\r\n      } as Record<LocaleKeys, string>,\r\n    },\r\n  },\r\n}\r\n\r\nconst configList: { label: LocaleKeys; to: string }[] = [\r\n  { label: 'settingRouteName', to: '/setting' },\r\n  { label: 'tagRouteName', to: '/tag' },\r\n  { label: 'relationRouteName', to: '/relation' },\r\n  { label: 'sunburstRouteName', to: '/sunburst' },\r\n  { label: 'timelineName', to: '/timeline' },\r\n]\r\n\r\n/**\r\n * 首页\r\n */\r\nconst Home: React.FC<PropsType> = () => {\r\n  const i18nLoad = useAsync(() => i18next.init(i18nOptions), [])\r\n  return (\r\n    <>\r\n      {i18nLoad.value && (\r\n        <Container maxWidth=\"sm\" className={css.root}>\r\n          {\r\n            <Card>\r\n              <CardHeader title={i18next.t<string, LocaleKeys>('chartList')} />\r\n              <CardContent>\r\n                <List component=\"nav\">\r\n                  {configList.map((config) => (\r\n                    <ListItem>\r\n                      <Link to={config.to}>\r\n                        {i18next.t<string, LocaleKeys>(config.label)}\r\n                      </Link>\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </CardContent>\r\n            </Card>\r\n          }\r\n        </Container>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import * as React from 'react'\r\nimport { useSnackbar } from 'notistack'\r\nimport { useMount } from 'react-use'\r\nimport { folderApi, noteApi } from 'joplin-api'\r\n\r\ntype PropsType = {}\r\n\r\nconst CreateNoteDemo: React.FC<PropsType> = () => {\r\n  const snackbar = useSnackbar()\r\n  useMount(async () => {\r\n    const folderList = await folderApi.listAll()\r\n    const folder = folderList[0]\r\n    const res = await noteApi.create({\r\n      title: 'test title',\r\n      body: 'test body',\r\n      parent_id: folder.id,\r\n    })\r\n    snackbar.enqueueSnackbar(\r\n      `Create note successfully: [${res.title}], The list of notes is: [${folder.title}]`,\r\n      {\r\n        variant: 'success',\r\n        autoHideDuration: 3000,\r\n      },\r\n    )\r\n  })\r\n  return <div>CreateNoteDemo</div>\r\n}\r\n\r\nexport default CreateNoteDemo\r\n","import { folderApi } from 'joplin-api'\r\nimport { FolderListAllRes } from 'joplin-api/dist/modal/FolderListAllRes'\r\n\r\nexport type SunburstData = {\r\n  label: string\r\n  children?: SunburstData[]\r\n  sum?: number\r\n}\r\n\r\nexport async function getNotebookSunburstData() {\r\n  const folderList = await folderApi.listAll()\r\n\r\n  function convert(folder: FolderListAllRes): SunburstData {\r\n    return {\r\n      label: folder.title,\r\n      sum: folder.note_count,\r\n      children: folder.children?.map(convert),\r\n    }\r\n  }\r\n\r\n  return {\r\n    label: 'root',\r\n    children: folderList.map(convert),\r\n  }\r\n}\r\n","import * as React from 'react'\r\nimport { useMount } from 'react-use'\r\nimport { Sunburst } from '@antv/g2plot'\r\nimport { getNotebookSunburstData } from './util/getNotebookSunburstData'\r\nimport i18next, { InitOptions } from 'i18next'\r\nimport { useMessage } from '../../common/hooks/useMessage'\r\n\r\ntype SunburstProps = {}\r\n\r\ntype LocaleKeys = 'successMsg' | 'errorMsg'\r\n\r\nconst i18nOptions: InitOptions = {\r\n  lng: navigator.language,\r\n  fallbackLng: 'en',\r\n  resources: {\r\n    en: {\r\n      translation: {\r\n        successMsg: 'The notebook list is loaded successfully',\r\n        errorMsg: 'Failed to load notebook list',\r\n      } as Record<LocaleKeys, string>,\r\n    },\r\n    'zh-CN': {\r\n      translation: {\r\n        successMsg: '笔记本列表加载成功',\r\n        errorMsg: '笔记本列表加载失败',\r\n      } as Record<LocaleKeys, string>,\r\n    },\r\n  },\r\n}\r\n\r\n/**\r\n * 笔记目录大小分析图\r\n */\r\nconst NotebookSunburst: React.FC<SunburstProps> = () => {\r\n  const { success, error } = useMessage()\r\n  useMount(async () => {\r\n    await i18next.init(i18nOptions)\r\n    try {\r\n      const data = await getNotebookSunburstData()\r\n      success(i18next.t<string, LocaleKeys>('successMsg'))\r\n      const sunburstPlot = new Sunburst('container', {\r\n        data,\r\n        type: 'treemap',\r\n        reflect: 'y',\r\n        seriesField: 'sum',\r\n        colorField: 'label',\r\n        innerRadius: 0.3,\r\n        interactions: [{ type: 'element-active' }],\r\n      })\r\n      sunburstPlot.render()\r\n    } catch (e) {\r\n      error(i18next.t<string, LocaleKeys>('errorMsg'))\r\n    }\r\n  })\r\n  return <div id={'container'} style={{ height: '100vh' }} />\r\n}\r\n\r\nexport default NotebookSunburst\r\n","import * as React from 'react'\r\nimport { useAsync, useMount } from 'react-use'\r\nimport { noteActionApi, noteApi, PageUtil } from 'joplin-api'\r\nimport Timeline from '@material-ui/lab/Timeline'\r\nimport TimelineItem from '@material-ui/lab/TimelineItem'\r\nimport TimelineSeparator from '@material-ui/lab/TimelineSeparator'\r\nimport TimelineConnector from '@material-ui/lab/TimelineConnector'\r\nimport TimelineContent from '@material-ui/lab/TimelineContent'\r\nimport TimelineDot from '@material-ui/lab/TimelineDot'\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CircularProgress,\r\n  Typography,\r\n} from '@material-ui/core'\r\nimport { TimelineOppositeContent } from '@material-ui/lab'\r\nimport i18next, { InitOptions } from 'i18next'\r\n\r\ntype NoteTimelineProps = {}\r\n\r\ntype LocaleKeys = 'openNoteAction'\r\n\r\nconst i18nOptions: InitOptions = {\r\n  lng: navigator.language,\r\n  fallbackLng: 'en',\r\n  resources: {\r\n    en: {\r\n      translation: {\r\n        openNoteAction: 'Open in editor',\r\n      } as Record<LocaleKeys, string>,\r\n    },\r\n    'zh-CN': {\r\n      translation: {\r\n        openNoteAction: '在编辑器中打开',\r\n      } as Record<LocaleKeys, string>,\r\n    },\r\n  },\r\n}\r\n\r\n/**\r\n * 笔记的时间线\r\n */\r\nconst NoteTimeline: React.FC<NoteTimelineProps> = () => {\r\n  const noteListState = useAsync(async () => {\r\n    return await PageUtil.pageToAllList(noteApi.list, {\r\n      fields: ['id', 'title', 'body', 'user_updated_time'],\r\n      order_by: 'user_updated_time',\r\n      order_dir: 'DESC',\r\n    })\r\n  }, [])\r\n\r\n  useMount(async () => {\r\n    await i18next.init(i18nOptions)\r\n  })\r\n\r\n  async function onOpenEditor(id: string) {\r\n    await noteActionApi.openAndWatch(id)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {noteListState.loading ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        <Timeline align=\"alternate\">\r\n          {noteListState.value!.map((note, i) => (\r\n            <TimelineItem>\r\n              <TimelineOppositeContent>\r\n                <Typography color=\"textSecondary\">\r\n                  {new Date(note.user_updated_time).toLocaleString()}\r\n                </Typography>\r\n              </TimelineOppositeContent>\r\n              <TimelineSeparator>\r\n                <TimelineDot color={i % 2 === 0 ? 'primary' : 'secondary'} />\r\n                <TimelineConnector />\r\n              </TimelineSeparator>\r\n              <TimelineContent>\r\n                <Card>\r\n                  <CardContent>\r\n                    <Typography variant={'h5'}>\r\n                      {note.title.startsWith('#')\r\n                        ? note.title.replace('# ', '')\r\n                        : note.title}\r\n                    </Typography>\r\n                  </CardContent>\r\n                  <CardActions>\r\n                    <Button onClick={() => onOpenEditor(note.id)}>\r\n                      {i18next.t<string, LocaleKeys>('openNoteAction')}\r\n                    </Button>\r\n                  </CardActions>\r\n                </Card>\r\n              </TimelineContent>\r\n            </TimelineItem>\r\n          ))}\r\n        </Timeline>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NoteTimeline\r\n","import { RouteConfig } from 'react-router-config'\r\nimport TagCloud from '../../pages/tag'\r\nimport RelationMap from '../../pages/relation'\r\nimport JoplinSetting from '../../pages/setting'\r\nimport Home from '../../pages/home'\r\nimport CreateNoteDemo from '../../pages/demo'\r\nimport NotebookSunburst from '../../pages/sunburst'\r\nimport NoteTimeline from '../../pages/timeline/NoteTimeline'\r\n\r\nexport const routeList: RouteConfig[] = [\r\n  {\r\n    path: '/setting',\r\n    component: JoplinSetting,\r\n  },\r\n  {\r\n    path: '/tag',\r\n    component: TagCloud,\r\n  },\r\n  {\r\n    path: '/sunburst',\r\n    component: NotebookSunburst,\r\n  },\r\n  {\r\n    path: '/relation',\r\n    component: RelationMap,\r\n  },\r\n  {\r\n    path: '/demo/create-note',\r\n    component: CreateNoteDemo,\r\n  },\r\n  {\r\n    path: '/timeline',\r\n    component: NoteTimeline,\r\n  },\r\n\r\n  {\r\n    path: '/',\r\n    component: Home,\r\n  },\r\n]\r\n","class WebStorage implements Storage {\r\n  constructor(private storage: Storage) {}\r\n\r\n  get length() {\r\n    return this.storage.length\r\n  }\r\n\r\n  clear = (): void => {\r\n    this.storage.clear()\r\n  }\r\n\r\n  getItem = (key: string): string | null => this.storage.getItem(key)\r\n\r\n  key = (index: number): string | null => this.storage.key(index)\r\n\r\n  removeItem = (key: string): void => {\r\n    this.storage.removeItem(key)\r\n  }\r\n\r\n  setItem = (key: string, value: string): void => {\r\n    this.storage.setItem(key, value)\r\n  }\r\n}\r\n\r\ntype StorageObject<T> = {\r\n  [P in keyof T]: T[P] extends object ? Readonly<T[P]> | null : T[P] | null\r\n}\r\n\r\n/**\r\n * 代理 Storage 使之更简单易用\r\n * @param storage\r\n */\r\nexport function proxyStorage<T extends object>(\r\n  storage: Storage,\r\n): Storage & StorageObject<T> {\r\n  const kSet = new Set([\r\n    'storage',\r\n    'length',\r\n    'clear',\r\n    'getItem',\r\n    'setItem',\r\n    'removeItem',\r\n    'key',\r\n  ] as (keyof Storage)[])\r\n  return new Proxy(new WebStorage(storage), {\r\n    get(target: Storage, p: string, receiver: any): any {\r\n      if (kSet.has(p)) {\r\n        return Reflect.get(target, p, receiver)\r\n      }\r\n      try {\r\n        return JSON.parse(target.getItem(p.toString())!)\r\n      } catch (e) {\r\n        return null\r\n      }\r\n    },\r\n    set(target: Storage, p: string, value: any, receiver: any): boolean {\r\n      if (kSet.has(p as any)) {\r\n        return Reflect.set(target, p, receiver)\r\n      }\r\n      target.setItem(\r\n        p.toString(),\r\n        value !== undefined && value !== null ? JSON.stringify(value) : value,\r\n      )\r\n      return true\r\n    },\r\n  }) as any\r\n}\r\n","import * as React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { renderRoutes } from 'react-router-config'\r\nimport { routeList } from './component/router/routeList'\r\nimport { useLocalStorage, useMount } from 'react-use'\r\nimport { SettingForm } from './pages/setting'\r\nimport { config } from 'joplin-api'\r\nimport { proxyStorage } from './common/util/proxyStorage'\r\n\r\ntype PropsType = {}\r\n\r\n//初始化 storage\r\nconst storage = proxyStorage<{ settingForm: SettingForm }>(localStorage)\r\nconfig.token = storage.settingForm?.token!\r\nconfig.port = storage.settingForm?.port!\r\n\r\nconst App: React.FC<PropsType> = () => {\r\n  const [settingForm] = useLocalStorage<SettingForm>('settingForm')\r\n  const history = useHistory()\r\n  useMount(() => {\r\n    if (!settingForm?.token || !settingForm?.port) {\r\n      history.push('/setting')\r\n      return\r\n    }\r\n  })\r\n  return renderRoutes(routeList)\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport App from './App'\r\nimport 'normalize.css'\r\nimport { IntlProvider } from 'react-intl'\r\nimport { SnackbarProvider } from 'notistack'\r\nimport { HashRouter } from 'react-router-dom'\r\nimport '@antv/graphin/dist/index.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <IntlProvider locale={window.navigator.language}>\r\n      <SnackbarProvider maxSnack={3}>\r\n        <HashRouter>\r\n          <App />\r\n        </HashRouter>\r\n      </SnackbarProvider>\r\n    </IntlProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","import { useSnackbar } from 'notistack'\r\n\r\nexport function useMessage() {\r\n  const snackbar = useSnackbar()\r\n  const autoHideDuration = 3000\r\n  return {\r\n    success(msg: string) {\r\n      snackbar.enqueueSnackbar(msg, {\r\n        variant: 'success',\r\n        autoHideDuration,\r\n      })\r\n    },\r\n    error(msg: string) {\r\n      snackbar.enqueueSnackbar(msg, {\r\n        variant: 'error',\r\n        autoHideDuration,\r\n      })\r\n    },\r\n  }\r\n}\r\n"],"sourceRoot":""}