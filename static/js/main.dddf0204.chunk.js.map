{"version":3,"sources":["serviceWorker.ts","pages/tag/api/TagCloudApi.ts","component/router/routeList.ts","pages/tag/TagCloud.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","tagCloudApi","tagApi","list","tagList","Promise","all","map","tag","a","id","title","notesByTagId","length","count","routeList","path","component","useState","tagCountList","setTagCountList","chart","useRef","useLayoutEffect","x","am4core","WordCloud","series","push","WordCloudSeries","data","dataFields","word","value","heatRules","labels","template","url","urlTarget","tooltipText","states","create","properties","fill","current","dispose","useMount","countList","style","width","height","am4themes_animated","ReactDOM","render","StrictMode","renderRoutes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0FCCOC,EAAc,IAX3B,oOAE0BC,IAAOC,OAFjC,cAEUC,EAFV,gBAGiBC,QAAQC,IAAIF,EAAQG,IAAR,uCAAY,WAAMC,GAAN,SAAAC,EAAA,kEAC/BD,EAAIE,GAD2B,KAE9BF,EAAIG,MAF0B,SAGrBT,IAAOU,aAAaJ,EAAIE,IAHH,0BAGQG,OAHR,mBACnCH,GADmC,KAEnCF,IAFmC,KAGnCM,MAHmC,kDAAZ,wDAH7B,iJ,SCLaC,EAA2B,CACtC,CACEC,KAAM,OACNC,UCMkC,WAAO,IAAD,EACFC,mBAAqB,IADnB,mBACnCC,EADmC,KACrBC,EADqB,KAEpCC,EAAQC,iBAAkB,MAmChC,OAlCAC,2BAAgB,WACd,IAAIC,EAAIC,IAAe,WAAYC,KAC7BC,EAASH,EAAEG,OAAOC,KAAK,IAAIC,KAuBjC,OAtBAF,EAAOG,KAAOX,EACdQ,EAAOI,WAAWrB,GAAK,KACvBiB,EAAOI,WAAWC,KAAO,MACzBL,EAAOI,WAAWE,MAAQ,QAE1BN,EAAOO,UAAUN,KAAK,CACpB,OAAUD,EAAOQ,OAAOC,SACxB,SAAY,OACZ,IAAOX,IAAc,WACrB,IAAOA,IAAc,WACrB,UAAa,UAGfE,EAAOQ,OAAOC,SAASC,IAAM,oDAC7BV,EAAOQ,OAAOC,SAASE,UAAY,SACnCX,EAAOQ,OAAOC,SAASG,YAAc,kBAElBZ,EAAOQ,OAAOC,SAASI,OAAOC,OAAO,SAC7CC,WAAWC,KAAOlB,IAAc,WAEzCJ,EAAcuB,QAAUpB,EAEnB,WACLA,EAAEqB,aAEH,CAAC1B,IAEJ2B,YAAQ,sBAAC,sBAAArC,EAAA,kEACPW,EADO,SACenB,EAAY8C,YAD3B,8EAKP,uBAAKrC,GAAG,WAAWsC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,c,kBCzCvDzB,IAAiB0B,KAEjBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACGC,YAAaxC,KAGlByC,SAASC,eAAe,SJ0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dddf0204.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { tagApi } from 'joplin-api'\r\n\r\nexport interface TagModel {\r\n  id: string\r\n  tag: string,\r\n  count: number\r\n}\r\n\r\nexport class TagCloudApi {\r\n  async countList() {\r\n    const tagList = await tagApi.list()\r\n    return await Promise.all(tagList.map(async tag => ({\r\n      id: tag.id,\r\n      tag: tag.title,\r\n      count: (await tagApi.notesByTagId(tag.id)).length,\r\n    }))) as TagModel[]\r\n  }\r\n}\r\n\r\nexport const tagCloudApi = new TagCloudApi()\r\n","import { RouteConfig } from 'react-router-config'\r\nimport TagCloud from '../../pages/tag'\r\n\r\nexport const routeList: RouteConfig[] = [\r\n  {\r\n    path: '/tag',\r\n    component: TagCloud,\r\n  },\r\n]\r\n","import * as React from 'react'\r\nimport { useLayoutEffect, useRef, useState } from 'react'\r\nimport * as am4core from '@amcharts/amcharts4/core'\r\nimport { WordCloud, WordCloudSeries } from '@amcharts/amcharts4/plugins/wordCloud'\r\nimport { tagCloudApi, TagModel } from './api/TagCloudApi'\r\nimport { useMount } from 'react-use'\r\n\r\ntype PropsType = {}\r\n\r\n/**\r\n * 标签云\r\n */\r\nconst TagCloud: React.FC<PropsType> = () => {\r\n  const [tagCountList, setTagCountList] = useState<TagModel[]>([])\r\n  const chart = useRef<WordCloud>(null)\r\n  useLayoutEffect(() => {\r\n    let x = am4core.create('chartdiv', WordCloud)\r\n    const series = x.series.push(new WordCloudSeries())\r\n    series.data = tagCountList\r\n    series.dataFields.id = 'id' as keyof TagModel\r\n    series.dataFields.word = 'tag' as keyof TagModel\r\n    series.dataFields.value = 'count' as keyof TagModel\r\n\r\n    series.heatRules.push({\r\n      'target': series.labels.template,\r\n      'property': 'fill',\r\n      'min': am4core.color('#0000CC'),\r\n      'max': am4core.color('#CC00CC'),\r\n      'dataField': 'value',\r\n    })\r\n\r\n    series.labels.template.url = 'https://stackoverflow.com/questions/tagged/{word}'\r\n    series.labels.template.urlTarget = '_blank'\r\n    series.labels.template.tooltipText = '{word}: {value}'\r\n\r\n    const hoverState = series.labels.template.states.create('hover')\r\n    hoverState.properties.fill = am4core.color('#FF0000')\r\n\r\n    ;(chart as any).current = x\r\n\r\n    return () => {\r\n      x.dispose()\r\n    }\r\n  }, [tagCountList])\r\n\r\n  useMount(async () => {\r\n    setTagCountList(await tagCloudApi.countList())\r\n  })\r\n\r\n  return (\r\n    <div id=\"chartdiv\" style={{ width: '100%', height: '100vh' }} />\r\n  )\r\n}\r\n\r\nexport default TagCloud\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport { renderRoutes } from 'react-router-config'\nimport { routeList } from './component/router/routeList'\nimport { HashRouter } from 'react-router-dom'\nimport * as am4core from '@amcharts/amcharts4/core'\nimport am4themes_animated from '@amcharts/amcharts4/themes/animated'\n\nam4core.useTheme(am4themes_animated)\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      {renderRoutes(routeList)}\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}