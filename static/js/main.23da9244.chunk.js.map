{"version":3,"sources":["pages/setting/JoplinSetting.tsx","pages/setting/index.ts","pages/setting/JoplinSetting.module.css","serviceWorker.ts","pages/tag/api/TagCloudApi.ts","pages/tag/TagCloud.tsx","pages/hello/Hello.tsx","pages/relation/__tests__/noteRelationConvertUtil.ts","pages/relation/RelationMap.tsx","pages/home/Home.tsx","pages/demo/CreateNoteDemo.tsx","component/router/routeList.ts","App.tsx","index.tsx"],"names":["JoplinSetting","useForm","defaultValues","port","register","handleSubmit","errors","snackbar","useSnackbar","useLocalStorage","setSettingForm","history","useHistory","data","a","console","log","config","token","noteApi","list","enqueueSnackbar","variant","autoHideDuration","push","container","justify","alignItems","className","css","maxWidth","component","onSubmit","fullWidth","name","label","autoFocus","error","inputRef","required","helperText","message","validate","val","type","color","module","exports","Boolean","window","location","hostname","match","tagCloudApi","tagApi","tagList","Promise","all","map","tag","id","title","notesByTagId","length","count","TagCloud","useState","tagCountList","setTagCountList","chart","useRef","useLayoutEffect","x","am4core","WordCloud","series","WordCloudSeries","dataFields","word","value","heatRules","labels","template","url","urlTarget","tooltipText","states","create","properties","fill","current","dispose","useMount","countList","style","width","height","Utils","mock","random","graphin","Hello","overflow","layout","options","document","documentElement","clientHeight","NoteRelationConvertUtil","noteList","md","MarkdownIt","noteIdSet","Set","note","findRelationByNote","parseInline","body","children","filter","attrGet","startsWith","substr","has","links","RelationMap","relationNoteList","setRelationNoteList","useEffect","networkSeries","ForceDirectedTree","ForceDirectedSeries","linkWith","nodes","text","fontSize","linkWithStrength","nodeTemplate","fillOpacity","hideOversized","truncate","linkTemplate","strokeWidth","linkHoverState","strokeOpacity","events","on","event","target","dataItem","childLinks","each","link","isHover","settingForm","convert","Home","CreateNoteDemo","folderApi","folderList","folder","parent_id","res","routeList","path","App","locale","navigator","language","maxSnack","renderRoutes","am4themes_animated","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.23da9244.chunk.js","sourcesContent":["import {\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n} from '@material-ui/core'\r\nimport * as React from 'react'\r\nimport css from './JoplinSetting.module.css'\r\nimport { useForm, ValidationRules } from 'react-hook-form'\r\nimport { config, noteApi } from 'joplin-api'\r\nimport { useSnackbar } from 'notistack'\r\nimport { useLocalStorage } from 'react-use'\r\nimport { useHistory } from 'react-router'\r\nimport { SettingForm } from './model/SettingForm'\r\n\r\ntype PropsType = {}\r\n\r\n/**\r\n * joplin 配置页面\r\n */\r\nconst JoplinSetting: React.FC<PropsType> = () => {\r\n  const { register, handleSubmit, errors } = useForm<SettingForm>({\r\n    defaultValues: {\r\n      port: 41184,\r\n    },\r\n  })\r\n\r\n  const snackbar = useSnackbar()\r\n\r\n  const [, setSettingForm] = useLocalStorage<SettingForm>('settingForm')\r\n  const history = useHistory()\r\n\r\n  async function onSubmit(data: SettingForm) {\r\n    console.log('handleSubmit: ', data)\r\n    try {\r\n      config.token = data.token\r\n      config.port = data.port\r\n      await noteApi.list(['id'])\r\n      setSettingForm(config)\r\n      snackbar.enqueueSnackbar('验证成功，即将进入图表页', {\r\n        variant: 'success',\r\n        autoHideDuration: 3000,\r\n      })\r\n      history.push('/')\r\n    } catch (e) {\r\n      snackbar.enqueueSnackbar(\r\n        '验证失败，请检查授权 token 令牌与端口号是否正确',\r\n        {\r\n          variant: 'error',\r\n          autoHideDuration: 3000,\r\n        },\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      className={css.container}\r\n    >\r\n      <Container maxWidth=\"xs\">\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          设置页\r\n        </Typography>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <TextField\r\n            fullWidth\r\n            name=\"token\"\r\n            label=\"授权 Token 令牌\"\r\n            autoFocus\r\n            error={!!errors.token}\r\n            inputRef={register({\r\n              required: 'token 是必填项',\r\n            })}\r\n            helperText={!!errors.token ? errors.token.message : ' '}\r\n          />\r\n          <TextField\r\n            fullWidth\r\n            name=\"port\"\r\n            label=\"端口\"\r\n            error={!!errors.port}\r\n            inputRef={register({\r\n              required: '端口是必填项',\r\n              validate(val) {\r\n                console.log(val)\r\n                return true\r\n              },\r\n            } as ValidationRules)}\r\n            helperText={!!errors.port ? errors.port.message : ' '}\r\n          />\r\n          <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">\r\n            完成\r\n          </Button>\r\n        </form>\r\n      </Container>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default JoplinSetting\r\n","export { default } from './JoplinSetting'\r\nexport * from './model/SettingForm'\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"JoplinSetting_container__a3I9p\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { tagApi } from 'joplin-api'\r\n\r\nexport interface TagModel {\r\n  id: string\r\n  tag: string,\r\n  count: number\r\n}\r\n\r\nexport class TagCloudApi {\r\n  async countList() {\r\n    const tagList = await tagApi.list()\r\n    return await Promise.all(tagList.map(async tag => ({\r\n      id: tag.id,\r\n      tag: tag.title,\r\n      count: (await tagApi.notesByTagId(tag.id)).length,\r\n    }))) as TagModel[]\r\n  }\r\n}\r\n\r\nexport const tagCloudApi = new TagCloudApi()\r\n","import * as React from 'react'\r\nimport { useLayoutEffect, useRef, useState } from 'react'\r\nimport * as am4core from '@amcharts/amcharts4/core'\r\nimport { WordCloud, WordCloudSeries } from '@amcharts/amcharts4/plugins/wordCloud'\r\nimport { tagCloudApi, TagModel } from './api/TagCloudApi'\r\nimport { useMount } from 'react-use'\r\nimport { useSnackbar } from 'notistack'\r\n\r\ntype PropsType = {}\r\n\r\n/**\r\n * 标签云\r\n */\r\nconst TagCloud: React.FC<PropsType> = () => {\r\n  const [tagCountList, setTagCountList] = useState<TagModel[]>([])\r\n  const chart = useRef<WordCloud>(null)\r\n  useLayoutEffect(() => {\r\n    let x = am4core.create('chartdiv', WordCloud)\r\n    const series = x.series.push(new WordCloudSeries())\r\n    series.data = tagCountList\r\n    series.dataFields.id = 'id' as keyof TagModel\r\n    series.dataFields.word = 'tag' as keyof TagModel\r\n    series.dataFields.value = 'count' as keyof TagModel\r\n\r\n    series.heatRules.push({\r\n      'target': series.labels.template,\r\n      'property': 'fill',\r\n      'min': am4core.color('#0000CC'),\r\n      'max': am4core.color('#CC00CC'),\r\n      'dataField': 'value',\r\n    })\r\n\r\n    series.labels.template.url = 'https://stackoverflow.com/questions/tagged/{word}'\r\n    series.labels.template.urlTarget = '_blank'\r\n    series.labels.template.tooltipText = '{word}: {value}'\r\n\r\n    const hoverState = series.labels.template.states.create('hover')\r\n    hoverState.properties.fill = am4core.color('#FF0000')\r\n\r\n    ;(chart as any).current = x\r\n\r\n    return () => {\r\n      x.dispose()\r\n    }\r\n  }, [tagCountList])\r\n\r\n  const snackbar = useSnackbar()\r\n  useMount(async () => {\r\n    try {\r\n      setTagCountList(await tagCloudApi.countList())\r\n      snackbar.enqueueSnackbar('Successfully loaded the joplin tag list')\r\n    } catch (e) {\r\n      console.error(e)\r\n      snackbar.enqueueSnackbar('Failed to load joplin tag list')\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div id=\"chartdiv\" style={{ width: '100%', height: '100vh' }} />\r\n  )\r\n}\r\n\r\nexport default TagCloud\r\n","import Graphin, { Utils } from '@antv/graphin/dist'\r\nimport * as React from 'react'\r\nimport '@antv/graphin/dist/index.css'\r\n\r\ntype PropsType = {}\r\n\r\nconst data = Utils.mock(20).random().graphin()\r\n\r\nconsole.log('data: ', data)\r\n\r\nconst Hello: React.FC<PropsType> = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflow: 'hidden',\r\n        height: '100vh',\r\n      }}\r\n    >\r\n      <Graphin\r\n        data={data}\r\n        layout={{ name: 'force' }}\r\n        options={{\r\n          height: window.document.documentElement.clientHeight,\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Hello\r\n","import MarkdownIt from 'markdown-it'\r\nimport { NoteGetRes } from 'joplin-api/dist/modal/NoteGetRes'\r\nimport { NoteProperties } from 'joplin-api/dist/modal/NoteProperties'\r\n\r\nexport type Note = Pick<NoteGetRes, 'id' | 'title'> & {\r\n  links: string[]\r\n}\r\n\r\ntype RelationNote = Pick<NoteProperties, 'id' | 'title' | 'body'>\r\n\r\nexport class NoteRelationConvertUtil {\r\n  static convert(noteList: RelationNote[]): Note[] {\r\n    const md = new MarkdownIt()\r\n    const noteIdSet = new Set(noteList.map((note) => note.id))\r\n\r\n    function findRelationByNote(note: RelationNote): string[] {\r\n      const tokenList = md.parseInline(note.body, '')\r\n      return tokenList[0]\r\n        .children!.filter((token) => {\r\n          return (\r\n            token.type === 'link_open' &&\r\n            token.attrGet('href')?.startsWith(':/')\r\n          )\r\n        })\r\n        .map((token) => {\r\n          return token.attrGet('href')?.substr(2)!\r\n        })\r\n        .filter((id) => {\r\n          return noteIdSet.has(id)\r\n        })\r\n    }\r\n\r\n    return noteList.map(\r\n      (note) =>\r\n        ({\r\n          id: note.id,\r\n          title: note.title,\r\n          links: findRelationByNote(note),\r\n        } as Note),\r\n    )\r\n  }\r\n}\r\n","import * as React from 'react'\r\nimport { useLocalStorage, useMount } from 'react-use'\r\nimport { config, noteApi } from 'joplin-api'\r\nimport * as am4core from '@amcharts/amcharts4/core'\r\nimport {\r\n  ForceDirectedSeries,\r\n  ForceDirectedTree,\r\n} from '@amcharts/amcharts4/plugins/forceDirected'\r\nimport { useEffect, useState } from 'react'\r\nimport {\r\n  Note,\r\n  NoteRelationConvertUtil,\r\n} from './__tests__/noteRelationConvertUtil'\r\nimport { SettingForm } from '../setting'\r\n\r\ntype PropsType = {}\r\n\r\n/**\r\n * 笔记关系图\r\n */\r\nconst RelationMap: React.FC<PropsType> = () => {\r\n  const [relationNoteList, setRelationNoteList] = useState<Note[]>([])\r\n\r\n  useEffect(() => {\r\n    const chart = am4core.create('chartdiv', ForceDirectedTree)\r\n\r\n    const networkSeries = chart.series.push(new ForceDirectedSeries())\r\n    networkSeries.dataFields.linkWith = 'links'\r\n    networkSeries.dataFields.name = 'title'\r\n    networkSeries.dataFields.id = 'id'\r\n    networkSeries.dataFields.value = 'id'\r\n    networkSeries.dataFields.children = 'children'\r\n\r\n    networkSeries.nodes.template.label.text = '{name}'\r\n    networkSeries.fontSize = 8\r\n    networkSeries.linkWithStrength = 0\r\n\r\n    const nodeTemplate = networkSeries.nodes.template\r\n    nodeTemplate.tooltipText = '{name}'\r\n    nodeTemplate.fillOpacity = 1\r\n    nodeTemplate.label.hideOversized = true\r\n    nodeTemplate.label.truncate = true\r\n\r\n    const linkTemplate = networkSeries.links.template\r\n    linkTemplate.strokeWidth = 1\r\n    const linkHoverState = linkTemplate.states.create('hover')\r\n    linkHoverState.properties.strokeOpacity = 1\r\n    linkHoverState.properties.strokeWidth = 2\r\n\r\n    nodeTemplate.events.on('over', function (event) {\r\n      const dataItem = event.target.dataItem\r\n      dataItem.childLinks.each(function (link) {\r\n        link.isHover = true\r\n      })\r\n    })\r\n\r\n    nodeTemplate.events.on('out', function (event) {\r\n      const dataItem = event.target.dataItem\r\n      dataItem.childLinks.each(function (link) {\r\n        link.isHover = false\r\n      })\r\n    })\r\n\r\n    networkSeries.data = relationNoteList\r\n  }, [relationNoteList])\r\n\r\n  const [settingForm] = useLocalStorage<SettingForm>('settingForm')\r\n\r\n  useMount(async () => {\r\n    config.token = settingForm!.token\r\n    config.port = settingForm!.port\r\n    const noteList = await noteApi.list(['id', 'title', 'body'])\r\n    setRelationNoteList(NoteRelationConvertUtil.convert(noteList))\r\n  })\r\n  return (\r\n    <div\r\n      id=\"chartdiv\"\r\n      style={{\r\n        width: '100%',\r\n        height: '100vh',\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default RelationMap\r\n","import * as React from 'react'\r\n\r\ntype PropsType = {}\r\n/**\r\n * 首页\r\n */\r\nconst Home: React.FC<PropsType> = () => {\r\n  return <div>Home</div>\r\n}\r\n\r\nexport default Home\r\n","import * as React from 'react'\r\nimport { useSnackbar } from 'notistack'\r\nimport { useMount } from 'react-use'\r\nimport { folderApi, noteApi } from 'joplin-api'\r\n\r\ntype PropsType = {}\r\n\r\nconst CreateNoteDemo: React.FC<PropsType> = () => {\r\n  const snackbar = useSnackbar()\r\n  useMount(async () => {\r\n    const folderList = await folderApi.list()\r\n    const folder = folderList[0]\r\n    const res = await noteApi.create({\r\n      title: 'test title',\r\n      body: 'test body',\r\n      parent_id: folder.id,\r\n    })\r\n    snackbar.enqueueSnackbar(\r\n      `Create note successfully: [${res.title}], The list of notes is: [${folder.title}]`,\r\n      {\r\n        variant: 'success',\r\n        autoHideDuration: 3000,\r\n      },\r\n    )\r\n  })\r\n  return <div>CreateNoteDemo</div>\r\n}\r\n\r\nexport default CreateNoteDemo\r\n","import { RouteConfig } from 'react-router-config'\r\nimport TagCloud from '../../pages/tag'\r\nimport Hello from '../../pages/hello'\r\nimport RelationMap from '../../pages/relation'\r\nimport JoplinSetting from '../../pages/setting'\r\nimport Home from '../../pages/home'\r\nimport CreateNoteDemo from '../../pages/demo'\r\n\r\nexport const routeList: RouteConfig[] = [\r\n  {\r\n    path: '/setting',\r\n    component: JoplinSetting,\r\n  },\r\n  {\r\n    path: '/tag',\r\n    component: TagCloud,\r\n  },\r\n  {\r\n    path: '/hello',\r\n    component: Hello,\r\n  },\r\n  {\r\n    path: '/relation',\r\n    component: RelationMap,\r\n  },\r\n  {\r\n    path: '/demo/create-note',\r\n    component: CreateNoteDemo,\r\n  },\r\n  {\r\n    path: '/',\r\n    component: Home,\r\n  },\r\n]\r\n","import * as React from 'react'\r\nimport { HashRouter, useHistory } from 'react-router-dom'\r\nimport { renderRoutes } from 'react-router-config'\r\nimport { routeList } from './component/router/routeList'\r\nimport { SnackbarProvider } from 'notistack'\r\nimport { IntlProvider } from 'react-intl'\r\nimport { useLocalStorage, useMount } from 'react-use'\r\nimport { SettingForm } from './pages/setting'\r\nimport { config } from 'joplin-api'\r\n\r\ntype PropsType = {}\r\n\r\nconst App: React.FC<PropsType> = () => {\r\n  const [settingForm] = useLocalStorage<SettingForm>('settingForm')\r\n  const history = useHistory()\r\n  useMount(() => {\r\n    if (!settingForm?.token || !settingForm?.port) {\r\n      history.push('/setting')\r\n      return\r\n    }\r\n\r\n    config.token = settingForm!.token\r\n    config.port = settingForm!.port\r\n  })\r\n  return (\r\n    <React.StrictMode>\r\n      <IntlProvider locale={window.navigator.language}>\r\n        <SnackbarProvider maxSnack={3}>\r\n          <HashRouter>{renderRoutes(routeList)}</HashRouter>\r\n        </SnackbarProvider>\r\n      </IntlProvider>\r\n    </React.StrictMode>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport * as am4core from '@amcharts/amcharts4/core'\nimport am4themes_animated from '@amcharts/amcharts4/themes/animated'\nimport App from './App'\nimport 'normalize.css'\n\nam4core.useTheme(am4themes_animated)\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}